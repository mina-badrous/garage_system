
garage_master_mcu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000026a  00800060  00000b56  00000bea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000033  008002ca  008002ca  00000e54  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000e54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000082  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000015a2  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002f0  00000000  00000000  000015d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000263a  00000000  00000000  000018c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eac  00000000  00000000  00003efb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000134a  00000000  00000000  00004da7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005f4  00000000  00000000  000060f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000a50  00000000  00000000  000066e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000de3  00000000  00000000  00007138  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000240  00000000  00000000  00007f1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 ac 02 	jmp	0x558	; 0x558 <__vector_13>
  38:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3c       	cpi	r26, 0xCA	; 202
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	aa ec       	ldi	r26, 0xCA	; 202
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3f       	cpi	r26, 0xFD	; 253
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 02 	call	0x492	; 0x492 <main>
  8a:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dc_motor_rotate_seconds>:
	clear_bit(MOTOR_PORT,MOTOR_IN2);
	pwm_duty(0);
}
//----------------------------------------------------------
static void dc_motor_rotate_seconds( u8 power,u8 direction,u8 seconds )
{
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	d8 2f       	mov	r29, r24
  9a:	16 2f       	mov	r17, r22
	u8 index;
	for(index=seconds;index>0;index--)
  9c:	44 23       	and	r20, r20
  9e:	b1 f0       	breq	.+44     	; 0xcc <dc_motor_rotate_seconds+0x3a>
  a0:	c4 2f       	mov	r28, r20
	pwm_init();
}
//-----------------------------------------------------------
static void dc_motor_rotate(u8 power,u8 direction)
{
	if(direction==DC_MOTOR_ROTATE_CLOCKWISE)
  a2:	11 11       	cpse	r17, r1
  a4:	03 c0       	rjmp	.+6      	; 0xac <dc_motor_rotate_seconds+0x1a>
	{
		set_bit(MOTOR_PORT,MOTOR_IN1);
  a6:	95 9a       	sbi	0x12, 5	; 18
		clear_bit(MOTOR_PORT,MOTOR_IN2);
  a8:	96 98       	cbi	0x12, 6	; 18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <dc_motor_rotate_seconds+0x1e>
	}
	else
	{
		clear_bit(MOTOR_PORT,MOTOR_IN1);
  ac:	95 98       	cbi	0x12, 5	; 18
		set_bit(MOTOR_PORT,MOTOR_IN2);
  ae:	96 9a       	sbi	0x12, 6	; 18
	}
	pwm_duty(power);
  b0:	8d 2f       	mov	r24, r29
  b2:	0e 94 5f 02 	call	0x4be	; 0x4be <pwm_duty>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	89 e6       	ldi	r24, 0x69	; 105
  ba:	98 e1       	ldi	r25, 0x18	; 24
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <dc_motor_rotate_seconds+0x2a>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <dc_motor_rotate_seconds+0x34>
  c6:	00 00       	nop
}
//----------------------------------------------------------
static void dc_motor_rotate_seconds( u8 power,u8 direction,u8 seconds )
{
	u8 index;
	for(index=seconds;index>0;index--)
  c8:	c1 50       	subi	r28, 0x01	; 1
  ca:	59 f7       	brne	.-42     	; 0xa2 <dc_motor_rotate_seconds+0x10>
	
}
//-----------------------------------------------------------
static void dc_motor_stop()
{
	clear_bit(MOTOR_PORT,MOTOR_IN1);
  cc:	95 98       	cbi	0x12, 5	; 18
	clear_bit(MOTOR_PORT,MOTOR_IN2);
  ce:	96 98       	cbi	0x12, 6	; 18
	pwm_duty(0);
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 5f 02 	call	0x4be	; 0x4be <pwm_duty>
	{
		dc_motor_rotate(power,direction);
		_delay_ms(1000);
	}
	dc_motor_stop();
}
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	1f 91       	pop	r17
  dc:	08 95       	ret

000000de <dc_motor_init>:
static void dc_motor_rotate_seconds(u8 power,u8 direction,u8 seconds);
static void dc_motor_stop();
//---------------------------------------------------------------------
void dc_motor_init()
{
	MOTOR_DDR |= (1<<MOTOR_IN1) | (1<<MOTOR_IN2) | (1<<MOTOR_PWM);
  de:	81 b3       	in	r24, 0x11	; 17
  e0:	80 6e       	ori	r24, 0xE0	; 224
  e2:	81 bb       	out	0x11, r24	; 17
	MOTOR_PORT &= ~((1<<MOTOR_IN1) | (1<<MOTOR_IN2));
  e4:	82 b3       	in	r24, 0x12	; 18
  e6:	8f 79       	andi	r24, 0x9F	; 159
  e8:	82 bb       	out	0x12, r24	; 18
	pwm_init();
  ea:	0e 94 4d 02 	call	0x49a	; 0x49a <pwm_init>
  ee:	08 95       	ret

000000f0 <open_garage>:
	dc_motor_rotate_seconds(100,DC_MOTOR_ROTATE_ANTICLOCKWISE,GARAGE_TIME/2);
}
//------------------------------------------------------------
void open_garage()
{
	e_garage_state=GARAGE_IS_OPENED;
  f0:	10 92 60 00 	sts	0x0060, r1
	dc_motor_rotate_seconds(100,DC_MOTOR_ROTATE_CLOCKWISE,GARAGE_TIME);
  f4:	48 e0       	ldi	r20, 0x08	; 8
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	84 e6       	ldi	r24, 0x64	; 100
  fa:	0e 94 49 00 	call	0x92	; 0x92 <dc_motor_rotate_seconds>
  fe:	08 95       	ret

00000100 <close_garage>:
}
//--------------------------------------------------------------
void close_garage()
{
	e_garage_state=GARAGE_IS_CLOSED;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	80 93 60 00 	sts	0x0060, r24
	dc_motor_rotate_seconds(100,DC_MOTOR_ROTATE_ANTICLOCKWISE,GARAGE_TIME);
 106:	48 e0       	ldi	r20, 0x08	; 8
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	84 e6       	ldi	r24, 0x64	; 100
 10c:	0e 94 49 00 	call	0x92	; 0x92 <dc_motor_rotate_seconds>
 110:	08 95       	ret

00000112 <set_admin_password>:
	

}

void set_admin_password( void )
{
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	c5 e6       	ldi	r28, 0x65	; 101
 11a:	d0 e0       	ldi	r29, 0x00	; 0
	u8 index;
	for(index=ADMIN_PASS_ADDRESS;index<ADMIN_PASS_ADDRESS+4;index++)
 11c:	11 e0       	ldi	r17, 0x01	; 1
	{
		write_data_to_device(EEPROM_DEVICE_ADDRESS,index,admin_password[index-ADMIN_PASS_ADDRESS]);
 11e:	49 91       	ld	r20, Y+
 120:	61 2f       	mov	r22, r17
 122:	80 ea       	ldi	r24, 0xA0	; 160
 124:	0e 94 67 01 	call	0x2ce	; 0x2ce <write_data_to_device>
 128:	2f e7       	ldi	r18, 0x7F	; 127
 12a:	88 e3       	ldi	r24, 0x38	; 56
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <set_admin_password+0x1c>
 136:	00 c0       	rjmp	.+0      	; 0x138 <set_admin_password+0x26>
 138:	00 00       	nop
}

void set_admin_password( void )
{
	u8 index;
	for(index=ADMIN_PASS_ADDRESS;index<ADMIN_PASS_ADDRESS+4;index++)
 13a:	1f 5f       	subi	r17, 0xFF	; 255
 13c:	15 30       	cpi	r17, 0x05	; 5
 13e:	79 f7       	brne	.-34     	; 0x11e <set_admin_password+0xc>
	{
		write_data_to_device(EEPROM_DEVICE_ADDRESS,index,admin_password[index-ADMIN_PASS_ADDRESS]);
		_delay_ms(50);
	}
}
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	1f 91       	pop	r17
 146:	08 95       	ret

00000148 <set_user_password>:
		_delay_ms(50);
	}
}

void set_user_password( void )
{
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	c1 e6       	ldi	r28, 0x61	; 97
 150:	d0 e0       	ldi	r29, 0x00	; 0
	u8 index;
	for(index=USER_PASS_ADDRESS;index<USER_PASS_ADDRESS+4;index++)
 152:	15 e0       	ldi	r17, 0x05	; 5
	{
		write_data_to_device(EEPROM_DEVICE_ADDRESS,index,user_password[index-USER_PASS_ADDRESS]);
 154:	49 91       	ld	r20, Y+
 156:	61 2f       	mov	r22, r17
 158:	80 ea       	ldi	r24, 0xA0	; 160
 15a:	0e 94 67 01 	call	0x2ce	; 0x2ce <write_data_to_device>
 15e:	2f e7       	ldi	r18, 0x7F	; 127
 160:	88 e3       	ldi	r24, 0x38	; 56
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <set_user_password+0x1c>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <set_user_password+0x26>
 16e:	00 00       	nop
}

void set_user_password( void )
{
	u8 index;
	for(index=USER_PASS_ADDRESS;index<USER_PASS_ADDRESS+4;index++)
 170:	1f 5f       	subi	r17, 0xFF	; 255
 172:	19 30       	cpi	r17, 0x09	; 9
 174:	79 f7       	brne	.-34     	; 0x154 <set_user_password+0xc>
	{
		write_data_to_device(EEPROM_DEVICE_ADDRESS,index,user_password[index-USER_PASS_ADDRESS]);
		_delay_ms(50);
	}
}
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	1f 91       	pop	r17
 17c:	08 95       	ret

0000017e <load_recent_password>:
		user_password[index]=temp_password[index];
	}
}

void load_recent_password(void)
{
 17e:	ff 92       	push	r15
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	1f 92       	push	r1
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
char admin_password[MAX_PASSWORD_DIGIT]={'1','2','3','4'};
char user_password[MAX_PASSWORD_DIGIT]={'1','1','1','1'};
//--------------------------------------------------------
static u8 first_time_check( void )
{
	u8 data=0;
 18e:	19 82       	std	Y+1, r1	; 0x01
	i2c_service_init();
 190:	0e 94 c5 01 	call	0x38a	; 0x38a <i2c_service_init>
	read_data_from_device(EEPROM_DEVICE_ADDRESS,FIRST_TIME_FLAG_ADDRESS,&data);
 194:	ae 01       	movw	r20, r28
 196:	4f 5f       	subi	r20, 0xFF	; 255
 198:	5f 4f       	sbci	r21, 0xFF	; 255
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	80 ea       	ldi	r24, 0xA0	; 160
 19e:	0e 94 90 01 	call	0x320	; 0x320 <read_data_from_device>
	return data;
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
}

void load_recent_password(void)
{
	u8 first_time_flag=first_time_check();
	if(first_time_flag==0xAA)
 1a4:	8a 3a       	cpi	r24, 0xAA	; 170
 1a6:	99 f5       	brne	.+102    	; 0x20e <load_recent_password+0x90>
 1a8:	05 e6       	ldi	r16, 0x65	; 101
 1aa:	10 e0       	ldi	r17, 0x00	; 0
 1ac:	ff 24       	eor	r15, r15
 1ae:	f3 94       	inc	r15
void get_admin_password(u8* temp_password)
{
	u8 index;
	for(index=ADMIN_PASS_ADDRESS;index<ADMIN_PASS_ADDRESS+4;index++)
	{
		read_data_from_device(EEPROM_DEVICE_ADDRESS,index,&(temp_password[index-ADMIN_PASS_ADDRESS]));
 1b0:	a8 01       	movw	r20, r16
 1b2:	6f 2d       	mov	r22, r15
 1b4:	80 ea       	ldi	r24, 0xA0	; 160
 1b6:	0e 94 90 01 	call	0x320	; 0x320 <read_data_from_device>
 1ba:	2f e7       	ldi	r18, 0x7F	; 127
 1bc:	88 e3       	ldi	r24, 0x38	; 56
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <load_recent_password+0x42>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <load_recent_password+0x4c>
 1ca:	00 00       	nop

//--------------------------------------------------------------------
void get_admin_password(u8* temp_password)
{
	u8 index;
	for(index=ADMIN_PASS_ADDRESS;index<ADMIN_PASS_ADDRESS+4;index++)
 1cc:	f3 94       	inc	r15
 1ce:	0f 5f       	subi	r16, 0xFF	; 255
 1d0:	1f 4f       	sbci	r17, 0xFF	; 255
 1d2:	25 e0       	ldi	r18, 0x05	; 5
 1d4:	f2 12       	cpse	r15, r18
 1d6:	ec cf       	rjmp	.-40     	; 0x1b0 <load_recent_password+0x32>
 1d8:	01 e6       	ldi	r16, 0x61	; 97
 1da:	10 e0       	ldi	r17, 0x00	; 0
 1dc:	0f 2e       	mov	r0, r31
 1de:	f5 e0       	ldi	r31, 0x05	; 5
 1e0:	ff 2e       	mov	r15, r31
 1e2:	f0 2d       	mov	r31, r0
void get_user_password(u8* temp_password )
{
	u8 index;
	for(index=USER_PASS_ADDRESS;index<USER_PASS_ADDRESS+4;index++)
	{
		read_data_from_device(EEPROM_DEVICE_ADDRESS,index,&(temp_password[index-USER_PASS_ADDRESS]));
 1e4:	a8 01       	movw	r20, r16
 1e6:	6f 2d       	mov	r22, r15
 1e8:	80 ea       	ldi	r24, 0xA0	; 160
 1ea:	0e 94 90 01 	call	0x320	; 0x320 <read_data_from_device>
 1ee:	8f e7       	ldi	r24, 0x7F	; 127
 1f0:	98 e3       	ldi	r25, 0x38	; 56
 1f2:	21 e0       	ldi	r18, 0x01	; 1
 1f4:	81 50       	subi	r24, 0x01	; 1
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	20 40       	sbci	r18, 0x00	; 0
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <load_recent_password+0x76>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <load_recent_password+0x80>
 1fe:	00 00       	nop
}

void get_user_password(u8* temp_password )
{
	u8 index;
	for(index=USER_PASS_ADDRESS;index<USER_PASS_ADDRESS+4;index++)
 200:	f3 94       	inc	r15
 202:	0f 5f       	subi	r16, 0xFF	; 255
 204:	1f 4f       	sbci	r17, 0xFF	; 255
 206:	89 e0       	ldi	r24, 0x09	; 9
 208:	f8 12       	cpse	r15, r24
 20a:	ec cf       	rjmp	.-40     	; 0x1e4 <load_recent_password+0x66>
 20c:	0f c0       	rjmp	.+30     	; 0x22c <load_recent_password+0xae>
}

static void first_time_save( void )
{
	//i2c_service_init();
	write_data_to_device(EEPROM_DEVICE_ADDRESS,FIRST_TIME_FLAG_ADDRESS,0xAA);//10101010
 20e:	4a ea       	ldi	r20, 0xAA	; 170
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	80 ea       	ldi	r24, 0xA0	; 160
 214:	0e 94 67 01 	call	0x2ce	; 0x2ce <write_data_to_device>
 218:	8f e3       	ldi	r24, 0x3F	; 63
 21a:	9c e9       	ldi	r25, 0x9C	; 156
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <load_recent_password+0x9e>
 220:	00 c0       	rjmp	.+0      	; 0x222 <load_recent_password+0xa4>
 222:	00 00       	nop
		get_user_password((u8 *)user_password);
	}
	else
	{
		first_time_save();
		set_admin_password();
 224:	0e 94 89 00 	call	0x112	; 0x112 <set_admin_password>
		set_user_password();
 228:	0e 94 a4 00 	call	0x148	; 0x148 <set_user_password>
	}
	
}
 22c:	0f 90       	pop	r0
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	1f 91       	pop	r17
 234:	0f 91       	pop	r16
 236:	ff 90       	pop	r15
 238:	08 95       	ret

0000023a <i2c_init>:
 */ 
#include "i2c.h"

void i2c_init( void )
{
	TWSR=0;
 23a:	11 b8       	out	0x01, r1	; 1
	TWBR=(u8)I2C_BIT_RATE;  //casting
 23c:	88 e8       	ldi	r24, 0x88	; 136
 23e:	80 b9       	out	0x00, r24	; 0
	set_bit(TWCR,TWEN);
 240:	86 b7       	in	r24, 0x36	; 54
 242:	84 60       	ori	r24, 0x04	; 4
 244:	86 bf       	out	0x36, r24	; 54
 246:	08 95       	ret

00000248 <i2c_start_condition>:
}

u8 i2c_start_condition()
{
	TWCR= (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 248:	84 ea       	ldi	r24, 0xA4	; 164
 24a:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
 24c:	06 b6       	in	r0, 0x36	; 54
 24e:	07 fe       	sbrs	r0, 7
 250:	fd cf       	rjmp	.-6      	; 0x24c <i2c_start_condition+0x4>
	if((TWSR & (0xF8)) != START_CONDITION_STATUS)
 252:	91 b1       	in	r25, 0x01	; 1
 254:	98 7f       	andi	r25, 0xF8	; 248
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	98 30       	cpi	r25, 0x08	; 8
 25a:	09 f4       	brne	.+2      	; 0x25e <i2c_start_condition+0x16>
 25c:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return 0;  //start done
	}
}
 25e:	08 95       	ret

00000260 <i2c_send_address>:

u8 i2c_send_address(u8 address,u8 rw)
{
	TWDR= address+rw ;
 260:	86 0f       	add	r24, r22
 262:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);  //start transmition
 264:	84 e8       	ldi	r24, 0x84	; 132
 266:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
 268:	06 b6       	in	r0, 0x36	; 54
 26a:	07 fe       	sbrs	r0, 7
 26c:	fd cf       	rjmp	.-6      	; 0x268 <i2c_send_address+0x8>
	if(((TWSR & (0xF8)) != SLAVE_ADDRESS_READ_ACK_STATUS) && ((TWSR & (0xF8)) != SLAVE_ADDRESS_WRITE_ACK_STATUS))
 26e:	81 b1       	in	r24, 0x01	; 1
 270:	88 7f       	andi	r24, 0xF8	; 248
 272:	80 34       	cpi	r24, 0x40	; 64
 274:	39 f0       	breq	.+14     	; 0x284 <i2c_send_address+0x24>
 276:	91 b1       	in	r25, 0x01	; 1
 278:	98 7f       	andi	r25, 0xF8	; 248
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	98 31       	cpi	r25, 0x18	; 24
 27e:	19 f4       	brne	.+6      	; 0x286 <i2c_send_address+0x26>
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	08 95       	ret
	{
		return 1;  //error
	}
	else
	{
		return 0;
 284:	80 e0       	ldi	r24, 0x00	; 0
	}			
}
 286:	08 95       	ret

00000288 <i2c_send_data>:

u8 i2c_send_data(u8 data )
{
	
	TWDR= data ;
 288:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);  //start transmition
 28a:	84 e8       	ldi	r24, 0x84	; 132
 28c:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
 28e:	06 b6       	in	r0, 0x36	; 54
 290:	07 fe       	sbrs	r0, 7
 292:	fd cf       	rjmp	.-6      	; 0x28e <i2c_send_data+0x6>
		
	if((TWSR & (0xF8)) != DATA_SENT_ACK_STATUS)
 294:	91 b1       	in	r25, 0x01	; 1
 296:	98 7f       	andi	r25, 0xF8	; 248
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	98 32       	cpi	r25, 0x28	; 40
 29c:	09 f4       	brne	.+2      	; 0x2a0 <i2c_send_data+0x18>
 29e:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
 2a0:	08 95       	ret

000002a2 <i2c_stop_condition>:


void i2c_stop_condition()
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 2a2:	84 e9       	ldi	r24, 0x94	; 148
 2a4:	86 bf       	out	0x36, r24	; 54
 2a6:	08 95       	ret

000002a8 <i2c_restart_condition>:
}

u8 i2c_restart_condition()
{
	TWCR= (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 2a8:	84 ea       	ldi	r24, 0xA4	; 164
 2aa:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
 2ac:	06 b6       	in	r0, 0x36	; 54
 2ae:	07 fe       	sbrs	r0, 7
 2b0:	fd cf       	rjmp	.-6      	; 0x2ac <i2c_restart_condition+0x4>
	if((TWSR & (0xF8)) != RESTART_CONDITION_STATUS)
 2b2:	91 b1       	in	r25, 0x01	; 1
 2b4:	98 7f       	andi	r25, 0xF8	; 248
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 31       	cpi	r25, 0x10	; 16
 2ba:	09 f4       	brne	.+2      	; 0x2be <i2c_restart_condition+0x16>
 2bc:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return 0;  //start done
	}
}
 2be:	08 95       	ret

000002c0 <i2c_nack_read_data>:
	return TWDR;
}

u8 i2c_nack_read_data()
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 2c0:	84 e8       	ldi	r24, 0x84	; 132
 2c2:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
 2c4:	06 b6       	in	r0, 0x36	; 54
 2c6:	07 fe       	sbrs	r0, 7
 2c8:	fd cf       	rjmp	.-6      	; 0x2c4 <i2c_nack_read_data+0x4>
	return TWDR;
 2ca:	83 b1       	in	r24, 0x03	; 3
}
 2cc:	08 95       	ret

000002ce <write_data_to_device>:
 */ 
#include "i2c_service.h"


u8 write_data_to_device(u8 device_address,u8 byte_address,u8 data)
{
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	c8 2f       	mov	r28, r24
 2d6:	d6 2f       	mov	r29, r22
 2d8:	14 2f       	mov	r17, r20
	u8 temp;
	temp=i2c_start_condition();
 2da:	0e 94 24 01 	call	0x248	; 0x248 <i2c_start_condition>
	if(temp==1) return 1; //error
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	a1 f0       	breq	.+40     	; 0x30a <write_data_to_device+0x3c>
	temp=i2c_send_address(device_address,I2C_WRITE);
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	8c 2f       	mov	r24, r28
 2e6:	0e 94 30 01 	call	0x260	; 0x260 <i2c_send_address>
	if(temp==1) return 1; //error
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	81 f0       	breq	.+32     	; 0x30e <write_data_to_device+0x40>
	temp=i2c_send_data(byte_address);
 2ee:	8d 2f       	mov	r24, r29
 2f0:	0e 94 44 01 	call	0x288	; 0x288 <i2c_send_data>
	if(temp==1) return 1; //error
 2f4:	81 30       	cpi	r24, 0x01	; 1
 2f6:	69 f0       	breq	.+26     	; 0x312 <write_data_to_device+0x44>
	temp=i2c_send_data(data);
 2f8:	81 2f       	mov	r24, r17
 2fa:	0e 94 44 01 	call	0x288	; 0x288 <i2c_send_data>
	if(temp==1) return 1; //error
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	51 f0       	breq	.+20     	; 0x316 <write_data_to_device+0x48>
	i2c_stop_condition();
 302:	0e 94 51 01 	call	0x2a2	; 0x2a2 <i2c_stop_condition>
	return 0;
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	07 c0       	rjmp	.+14     	; 0x318 <write_data_to_device+0x4a>

u8 write_data_to_device(u8 device_address,u8 byte_address,u8 data)
{
	u8 temp;
	temp=i2c_start_condition();
	if(temp==1) return 1; //error
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	05 c0       	rjmp	.+10     	; 0x318 <write_data_to_device+0x4a>
	temp=i2c_send_address(device_address,I2C_WRITE);
	if(temp==1) return 1; //error
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	03 c0       	rjmp	.+6      	; 0x318 <write_data_to_device+0x4a>
	temp=i2c_send_data(byte_address);
	if(temp==1) return 1; //error
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	01 c0       	rjmp	.+2      	; 0x318 <write_data_to_device+0x4a>
	temp=i2c_send_data(data);
	if(temp==1) return 1; //error
 316:	81 e0       	ldi	r24, 0x01	; 1
	i2c_stop_condition();
	return 0;
}
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	08 95       	ret

00000320 <read_data_from_device>:

u8 read_data_from_device(u8 device_address,u8 byte_address,u8* data)
{
 320:	0f 93       	push	r16
 322:	1f 93       	push	r17
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	18 2f       	mov	r17, r24
 32a:	06 2f       	mov	r16, r22
 32c:	ea 01       	movw	r28, r20
	u8 temp;
	temp=i2c_start_condition();
 32e:	0e 94 24 01 	call	0x248	; 0x248 <i2c_start_condition>
	if(temp==1) return 1; //error
 332:	81 30       	cpi	r24, 0x01	; 1
 334:	e1 f0       	breq	.+56     	; 0x36e <read_data_from_device+0x4e>
	temp=i2c_send_address(device_address,I2C_WRITE);
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	81 2f       	mov	r24, r17
 33a:	0e 94 30 01 	call	0x260	; 0x260 <i2c_send_address>
	if(temp==1) return 1; //error
 33e:	81 30       	cpi	r24, 0x01	; 1
 340:	c1 f0       	breq	.+48     	; 0x372 <read_data_from_device+0x52>
	temp=i2c_send_data(byte_address);
 342:	80 2f       	mov	r24, r16
 344:	0e 94 44 01 	call	0x288	; 0x288 <i2c_send_data>
	if(temp==1) return 1; //error
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	a9 f0       	breq	.+42     	; 0x376 <read_data_from_device+0x56>
	temp=i2c_restart_condition();
 34c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <i2c_restart_condition>
	if(temp==1) return 1; //error
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	99 f0       	breq	.+38     	; 0x37a <read_data_from_device+0x5a>
	temp=i2c_send_address(device_address,I2C_READ);
 354:	61 e0       	ldi	r22, 0x01	; 1
 356:	81 2f       	mov	r24, r17
 358:	0e 94 30 01 	call	0x260	; 0x260 <i2c_send_address>
	if(temp==1) return 1; //error
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	79 f0       	breq	.+30     	; 0x37e <read_data_from_device+0x5e>
	*data=i2c_nack_read_data();
 360:	0e 94 60 01 	call	0x2c0	; 0x2c0 <i2c_nack_read_data>
 364:	88 83       	st	Y, r24
	i2c_stop_condition();
 366:	0e 94 51 01 	call	0x2a2	; 0x2a2 <i2c_stop_condition>
	return 0;
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	09 c0       	rjmp	.+18     	; 0x380 <read_data_from_device+0x60>

u8 read_data_from_device(u8 device_address,u8 byte_address,u8* data)
{
	u8 temp;
	temp=i2c_start_condition();
	if(temp==1) return 1; //error
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	07 c0       	rjmp	.+14     	; 0x380 <read_data_from_device+0x60>
	temp=i2c_send_address(device_address,I2C_WRITE);
	if(temp==1) return 1; //error
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	05 c0       	rjmp	.+10     	; 0x380 <read_data_from_device+0x60>
	temp=i2c_send_data(byte_address);
	if(temp==1) return 1; //error
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	03 c0       	rjmp	.+6      	; 0x380 <read_data_from_device+0x60>
	temp=i2c_restart_condition();
	if(temp==1) return 1; //error
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	01 c0       	rjmp	.+2      	; 0x380 <read_data_from_device+0x60>
	temp=i2c_send_address(device_address,I2C_READ);
	if(temp==1) return 1; //error
 37e:	81 e0       	ldi	r24, 0x01	; 1
	*data=i2c_nack_read_data();
	i2c_stop_condition();
	return 0;
}
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	1f 91       	pop	r17
 386:	0f 91       	pop	r16
 388:	08 95       	ret

0000038a <i2c_service_init>:

void i2c_service_init()
{
	i2c_init();
 38a:	0e 94 1d 01 	call	0x23a	; 0x23a <i2c_init>
 38e:	08 95       	ret

00000390 <init_mcu>:
	}
}
//----------------------------------------------------------
void init_mcu()
{
	serial_interrupt_init();
 390:	0e 94 ef 02 	call	0x5de	; 0x5de <serial_interrupt_init>
	spi_master_init();
 394:	0e 94 87 04 	call	0x90e	; 0x90e <spi_master_init>
	dc_motor_init();
 398:	0e 94 6f 00 	call	0xde	; 0xde <dc_motor_init>
	load_recent_password();   //check if the factory default or user set new password
 39c:	0e 94 bf 00 	call	0x17e	; 0x17e <load_recent_password>
 3a0:	08 95       	ret

000003a2 <logged_out_mcu_func>:
void logged_out_mcu_func()
{
	u8 error=0;
	 while(1)  //init terminal wait for admin password
	 {
		 flush_buffer();
 3a2:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <flush_buffer>
		 shell_init();
 3a6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <shell_init>
 3aa:	2f ef       	ldi	r18, 0xFF	; 255
 3ac:	80 e7       	ldi	r24, 0x70	; 112
 3ae:	92 e0       	ldi	r25, 0x02	; 2
 3b0:	21 50       	subi	r18, 0x01	; 1
 3b2:	80 40       	sbci	r24, 0x00	; 0
 3b4:	90 40       	sbci	r25, 0x00	; 0
 3b6:	e1 f7       	brne	.-8      	; 0x3b0 <logged_out_mcu_func+0xe>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <logged_out_mcu_func+0x18>
 3ba:	00 00       	nop
		 _delay_ms(100);
		 admin_shell_password_enter();
 3bc:	0e 94 de 03 	call	0x7bc	; 0x7bc <admin_shell_password_enter>
		 while(rx_interrupt_status==1)
 3c0:	80 91 cb 02 	lds	r24, 0x02CB
 3c4:	81 30       	cpi	r24, 0x01	; 1
 3c6:	31 f4       	brne	.+12     	; 0x3d4 <logged_out_mcu_func+0x32>
		 {
			 master_spi_state();
 3c8:	0e 94 b0 04 	call	0x960	; 0x960 <master_spi_state>
	 {
		 flush_buffer();
		 shell_init();
		 _delay_ms(100);
		 admin_shell_password_enter();
		 while(rx_interrupt_status==1)
 3cc:	80 91 cb 02 	lds	r24, 0x02CB
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	d1 f3       	breq	.-12     	; 0x3c8 <logged_out_mcu_func+0x26>
		 {
			 master_spi_state();
		 }
		 error=admin_shell_password_check();
 3d4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <admin_shell_password_check>
		 if(error==0) break;
 3d8:	88 23       	and	r24, r24
 3da:	71 f0       	breq	.+28     	; 0x3f8 <logged_out_mcu_func+0x56>
 3dc:	2f ef       	ldi	r18, 0xFF	; 255
 3de:	80 e7       	ldi	r24, 0x70	; 112
 3e0:	92 e0       	ldi	r25, 0x02	; 2
 3e2:	21 50       	subi	r18, 0x01	; 1
 3e4:	80 40       	sbci	r24, 0x00	; 0
 3e6:	90 40       	sbci	r25, 0x00	; 0
 3e8:	e1 f7       	brne	.-8      	; 0x3e2 <logged_out_mcu_func+0x40>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <logged_out_mcu_func+0x4a>
 3ec:	00 00       	nop
		 _delay_ms(100);
		 new_line();
 3ee:	0e 94 fe 02 	call	0x5fc	; 0x5fc <new_line>
		 flush_buffer();
 3f2:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <flush_buffer>
	 }
 3f6:	d5 cf       	rjmp	.-86     	; 0x3a2 <logged_out_mcu_func>
 3f8:	08 95       	ret

000003fa <menu_mcu_func>:
}
//-------------------------------------------------------------
void menu_mcu_func()
{
 3fa:	cf 93       	push	r28
		new_line();
		_delay_ms(50);
		new_line();
		flush_buffer();
		menu();
		rx_interrupt_status=1;
 3fc:	c1 e0       	ldi	r28, 0x01	; 1
 3fe:	2f ef       	ldi	r18, 0xFF	; 255
 400:	80 e7       	ldi	r24, 0x70	; 112
 402:	92 e0       	ldi	r25, 0x02	; 2
 404:	21 50       	subi	r18, 0x01	; 1
 406:	80 40       	sbci	r24, 0x00	; 0
 408:	90 40       	sbci	r25, 0x00	; 0
 40a:	e1 f7       	brne	.-8      	; 0x404 <menu_mcu_func+0xa>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <menu_mcu_func+0x14>
 40e:	00 00       	nop
{
	u8 menu_selected_index=0;
	while(1)  //admin success password code
	{
		_delay_ms(100);
		new_line();
 410:	0e 94 fe 02 	call	0x5fc	; 0x5fc <new_line>
 414:	2f e7       	ldi	r18, 0x7F	; 127
 416:	88 e3       	ldi	r24, 0x38	; 56
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	21 50       	subi	r18, 0x01	; 1
 41c:	80 40       	sbci	r24, 0x00	; 0
 41e:	90 40       	sbci	r25, 0x00	; 0
 420:	e1 f7       	brne	.-8      	; 0x41a <menu_mcu_func+0x20>
 422:	00 c0       	rjmp	.+0      	; 0x424 <menu_mcu_func+0x2a>
 424:	00 00       	nop
		_delay_ms(50);
		new_line();
 426:	0e 94 fe 02 	call	0x5fc	; 0x5fc <new_line>
		flush_buffer();
 42a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <flush_buffer>
		menu();
 42e:	0e 94 2d 04 	call	0x85a	; 0x85a <menu>
		rx_interrupt_status=1;
 432:	c0 93 cb 02 	sts	0x02CB, r28
		enable_rx_interrupt();
 436:	0e 94 7d 05 	call	0xafa	; 0xafa <enable_rx_interrupt>
		while(rx_interrupt_status==1)
 43a:	80 91 cb 02 	lds	r24, 0x02CB
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	31 f4       	brne	.+12     	; 0x44e <menu_mcu_func+0x54>
		{
			master_spi_state();
 442:	0e 94 b0 04 	call	0x960	; 0x960 <master_spi_state>
		new_line();
		flush_buffer();
		menu();
		rx_interrupt_status=1;
		enable_rx_interrupt();
		while(rx_interrupt_status==1)
 446:	80 91 cb 02 	lds	r24, 0x02CB
 44a:	81 30       	cpi	r24, 0x01	; 1
 44c:	d1 f3       	breq	.-12     	; 0x442 <menu_mcu_func+0x48>
		{
			master_spi_state();
		}
		menu_selected_index=menu_selected_check();
 44e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <menu_selected_check>
		if(menu_selected_index==255) continue;
 452:	8f 3f       	cpi	r24, 0xFF	; 255
 454:	a1 f2       	breq	.-88     	; 0x3fe <menu_mcu_func+0x4>
		else if(menu_selected_index==5) break;
 456:	85 30       	cpi	r24, 0x05	; 5
 458:	91 f6       	brne	.-92     	; 0x3fe <menu_mcu_func+0x4>
	}  
}
 45a:	cf 91       	pop	r28
 45c:	08 95       	ret

0000045e <mcu_state>:
	}
}
//-------------------------------------------------------
void mcu_state()
{
	switch(master_mcu_state)
 45e:	80 91 ca 02 	lds	r24, 0x02CA
 462:	81 30       	cpi	r24, 0x01	; 1
 464:	51 f0       	breq	.+20     	; 0x47a <mcu_state+0x1c>
 466:	18 f0       	brcs	.+6      	; 0x46e <mcu_state+0x10>
 468:	82 30       	cpi	r24, 0x02	; 2
 46a:	91 f4       	brne	.+36     	; 0x490 <mcu_state+0x32>
 46c:	0c c0       	rjmp	.+24     	; 0x486 <mcu_state+0x28>
	{
		case INIT_STATE :
		{
					init_mcu();	
 46e:	0e 94 c8 01 	call	0x390	; 0x390 <init_mcu>
					master_mcu_state=LOGGED_OUT_STATE;		
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	80 93 ca 02 	sts	0x02CA, r24
					break;
 478:	08 95       	ret
		}					
		case LOGGED_OUT_STATE:
		{
					logged_out_mcu_func();
 47a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <logged_out_mcu_func>
					master_mcu_state=MENU_STATE;
 47e:	82 e0       	ldi	r24, 0x02	; 2
 480:	80 93 ca 02 	sts	0x02CA, r24
					break;
 484:	08 95       	ret
		}					
		case MENU_STATE :
		{
					menu_mcu_func();
 486:	0e 94 fd 01 	call	0x3fa	; 0x3fa <menu_mcu_func>
					master_mcu_state=LOGGED_OUT_STATE;
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	80 93 ca 02 	sts	0x02CA, r24
 490:	08 95       	ret

00000492 <main>:
void logged_out_mcu_func();
void menu_mcu_func();
//-------------------------------------------------------
int main(void)
{
	sei();
 492:	78 94       	sei
	while(1)
	{
		mcu_state();
 494:	0e 94 2f 02 	call	0x45e	; 0x45e <mcu_state>
 498:	fd cf       	rjmp	.-6      	; 0x494 <main+0x2>

0000049a <pwm_init>:
 */ 
#include "pwm.h"
//-----------------------------------------------------
void pwm_init()
{
	set_bit(TCCR2,WGM20);
 49a:	85 b5       	in	r24, 0x25	; 37
 49c:	80 64       	ori	r24, 0x40	; 64
 49e:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2,WGM21);//phase corect pwm
 4a0:	85 b5       	in	r24, 0x25	; 37
 4a2:	87 7f       	andi	r24, 0xF7	; 247
 4a4:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2,COM20);
 4a6:	85 b5       	in	r24, 0x25	; 37
 4a8:	8f 7e       	andi	r24, 0xEF	; 239
 4aa:	85 bd       	out	0x25, r24	; 37
	set_bit(TCCR2,COM21); //set on compare match when upcount
 4ac:	85 b5       	in	r24, 0x25	; 37
 4ae:	80 62       	ori	r24, 0x20	; 32
 4b0:	85 bd       	out	0x25, r24	; 37
	TCCR2 |=(1<<CS20) | (1<<CS21)| (1<<CS22);  //1024 prescaller
 4b2:	85 b5       	in	r24, 0x25	; 37
 4b4:	87 60       	ori	r24, 0x07	; 7
 4b6:	85 bd       	out	0x25, r24	; 37
	OCR2=0;
 4b8:	13 bc       	out	0x23, r1	; 35
	TCNT2=0;
 4ba:	14 bc       	out	0x24, r1	; 36
 4bc:	08 95       	ret

000004be <pwm_duty>:
}

void pwm_duty(u8 duty)
{
	OCR2=(duty*255/100);
 4be:	2f ef       	ldi	r18, 0xFF	; 255
 4c0:	82 9f       	mul	r24, r18
 4c2:	c0 01       	movw	r24, r0
 4c4:	11 24       	eor	r1, r1
 4c6:	64 e6       	ldi	r22, 0x64	; 100
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	0e 94 81 05 	call	0xb02	; 0xb02 <__divmodhi4>
 4ce:	63 bd       	out	0x23, r22	; 35
 4d0:	08 95       	ret

000004d2 <__vector_14>:
SHELL_DATA rx_buffer={{rx_arr},MAX_INPUT_CHAR,0};
volatile u8 rx_interrupt_status=0;
SHELL_DATA* data_to_send_address;
//------------------------------------------------------
ISR(USART_UDRE_vect)   //serial tx interrupt service routine
{
 4d2:	1f 92       	push	r1
 4d4:	0f 92       	push	r0
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	0f 92       	push	r0
 4da:	11 24       	eor	r1, r1
 4dc:	2f 93       	push	r18
 4de:	3f 93       	push	r19
 4e0:	4f 93       	push	r20
 4e2:	5f 93       	push	r21
 4e4:	6f 93       	push	r22
 4e6:	7f 93       	push	r23
 4e8:	8f 93       	push	r24
 4ea:	9f 93       	push	r25
 4ec:	af 93       	push	r26
 4ee:	bf 93       	push	r27
 4f0:	ef 93       	push	r30
 4f2:	ff 93       	push	r31
	if(data_to_send_address->length >1)
 4f4:	e0 91 f7 02 	lds	r30, 0x02F7
 4f8:	f0 91 f8 02 	lds	r31, 0x02F8
 4fc:	82 81       	ldd	r24, Z+2	; 0x02
 4fe:	82 30       	cpi	r24, 0x02	; 2
 500:	b0 f0       	brcs	.+44     	; 0x52e <__vector_14+0x5c>
	{
		UDR=data_to_send_address->data.string[(data_to_send_address->index)];
 502:	83 81       	ldd	r24, Z+3	; 0x03
 504:	01 90       	ld	r0, Z+
 506:	f0 81       	ld	r31, Z
 508:	e0 2d       	mov	r30, r0
 50a:	e8 0f       	add	r30, r24
 50c:	f1 1d       	adc	r31, r1
 50e:	80 81       	ld	r24, Z
 510:	8c b9       	out	0x0c, r24	; 12
		(data_to_send_address->index)++;
 512:	e0 91 f7 02 	lds	r30, 0x02F7
 516:	f0 91 f8 02 	lds	r31, 0x02F8
 51a:	83 81       	ldd	r24, Z+3	; 0x03
 51c:	8f 5f       	subi	r24, 0xFF	; 255
 51e:	83 83       	std	Z+3, r24	; 0x03
		if((data_to_send_address->index)==data_to_send_address->length)
 520:	92 81       	ldd	r25, Z+2	; 0x02
 522:	89 13       	cpse	r24, r25
 524:	08 c0       	rjmp	.+16     	; 0x536 <__vector_14+0x64>
		{
			data_to_send_address->index=0;
 526:	13 82       	std	Z+3, r1	; 0x03
			disable_tx_interrupt();
 528:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <disable_tx_interrupt>
 52c:	04 c0       	rjmp	.+8      	; 0x536 <__vector_14+0x64>
			
		}
	}
	else
	{
		UDR=data_to_send_address->data.ascii;
 52e:	80 81       	ld	r24, Z
 530:	8c b9       	out	0x0c, r24	; 12
		disable_tx_interrupt();
 532:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <disable_tx_interrupt>
	}
	
}
 536:	ff 91       	pop	r31
 538:	ef 91       	pop	r30
 53a:	bf 91       	pop	r27
 53c:	af 91       	pop	r26
 53e:	9f 91       	pop	r25
 540:	8f 91       	pop	r24
 542:	7f 91       	pop	r23
 544:	6f 91       	pop	r22
 546:	5f 91       	pop	r21
 548:	4f 91       	pop	r20
 54a:	3f 91       	pop	r19
 54c:	2f 91       	pop	r18
 54e:	0f 90       	pop	r0
 550:	0f be       	out	0x3f, r0	; 63
 552:	0f 90       	pop	r0
 554:	1f 90       	pop	r1
 556:	18 95       	reti

00000558 <__vector_13>:


ISR(USART_RXC_vect)  //serial rx interrupt service routine
{
 558:	1f 92       	push	r1
 55a:	0f 92       	push	r0
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	0f 92       	push	r0
 560:	11 24       	eor	r1, r1
 562:	2f 93       	push	r18
 564:	3f 93       	push	r19
 566:	4f 93       	push	r20
 568:	5f 93       	push	r21
 56a:	6f 93       	push	r22
 56c:	7f 93       	push	r23
 56e:	8f 93       	push	r24
 570:	9f 93       	push	r25
 572:	af 93       	push	r26
 574:	bf 93       	push	r27
 576:	ef 93       	push	r30
 578:	ff 93       	push	r31
	char temp;
	if(rx_buffer.index <rx_buffer.length) //check buffer size limit
 57a:	80 91 6c 00 	lds	r24, 0x006C
 57e:	90 91 6b 00 	lds	r25, 0x006B
 582:	89 17       	cp	r24, r25
 584:	c8 f4       	brcc	.+50     	; 0x5b8 <__vector_13+0x60>
	{
		temp=UDR;
 586:	9c b1       	in	r25, 0x0c	; 12
		if(temp !=0x0D)  //if not cariage return
 588:	9d 30       	cpi	r25, 0x0D	; 13
 58a:	69 f0       	breq	.+26     	; 0x5a6 <__vector_13+0x4e>
		{
			rx_buffer.data.string[rx_buffer.index]=temp;  //save data in index
 58c:	e0 91 69 00 	lds	r30, 0x0069
 590:	f0 91 6a 00 	lds	r31, 0x006A
 594:	e8 0f       	add	r30, r24
 596:	f1 1d       	adc	r31, r1
 598:	90 83       	st	Z, r25
			(rx_buffer.index)++;  // increment index
 59a:	ec e6       	ldi	r30, 0x6C	; 108
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	80 81       	ld	r24, Z
 5a0:	8f 5f       	subi	r24, 0xFF	; 255
 5a2:	80 83       	st	Z, r24
 5a4:	0b c0       	rjmp	.+22     	; 0x5bc <__vector_13+0x64>
		}
		else    //if the input is enter char
		{
			rx_buffer.length=(rx_buffer.index); //save length of the string
 5a6:	80 93 6b 00 	sts	0x006B, r24
			rx_buffer.index=0;
 5aa:	10 92 6c 00 	sts	0x006C, r1
			disable_rx_interrupt();
 5ae:	0e 94 79 05 	call	0xaf2	; 0xaf2 <disable_rx_interrupt>
			rx_interrupt_status=0;
 5b2:	10 92 cb 02 	sts	0x02CB, r1
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <__vector_13+0x64>
		}
		
	}
	else
	{
		rx_buffer.index=0;
 5b8:	10 92 6c 00 	sts	0x006C, r1
	}
}
 5bc:	ff 91       	pop	r31
 5be:	ef 91       	pop	r30
 5c0:	bf 91       	pop	r27
 5c2:	af 91       	pop	r26
 5c4:	9f 91       	pop	r25
 5c6:	8f 91       	pop	r24
 5c8:	7f 91       	pop	r23
 5ca:	6f 91       	pop	r22
 5cc:	5f 91       	pop	r21
 5ce:	4f 91       	pop	r20
 5d0:	3f 91       	pop	r19
 5d2:	2f 91       	pop	r18
 5d4:	0f 90       	pop	r0
 5d6:	0f be       	out	0x3f, r0	; 63
 5d8:	0f 90       	pop	r0
 5da:	1f 90       	pop	r1
 5dc:	18 95       	reti

000005de <serial_interrupt_init>:

void serial_interrupt_init()
{
	serial_init();
 5de:	0e 94 6e 05 	call	0xadc	; 0xadc <serial_init>
 5e2:	08 95       	ret

000005e4 <flush_buffer>:
}

//-------------------------------------------------------end of ISR
void flush_buffer()
{
	rx_buffer.data.string=rx_flush_arr;
 5e4:	83 ee       	ldi	r24, 0xE3	; 227
 5e6:	92 e0       	ldi	r25, 0x02	; 2
 5e8:	90 93 6a 00 	sts	0x006A, r25
 5ec:	80 93 69 00 	sts	0x0069, r24
	rx_buffer.length=MAX_INPUT_CHAR;
 5f0:	84 e1       	ldi	r24, 0x14	; 20
 5f2:	80 93 6b 00 	sts	0x006B, r24
	rx_buffer.index=0;
 5f6:	10 92 6c 00 	sts	0x006C, r1
 5fa:	08 95       	ret

000005fc <new_line>:
}


void new_line()
{
	data_to_send_address=&enter_key_stroke;
 5fc:	81 e7       	ldi	r24, 0x71	; 113
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	90 93 f8 02 	sts	0x02F8, r25
 604:	80 93 f7 02 	sts	0x02F7, r24
	enable_tx_interrupt();
 608:	0e 94 7f 05 	call	0xafe	; 0xafe <enable_tx_interrupt>
 60c:	08 95       	ret

0000060e <shell_print_with_new_line>:
	close_garage();
}
//---------------------------------------------------------
static void shell_print_with_new_line(SHELL_DATA* strings)
{
	data_to_send_address=strings;
 60e:	90 93 f8 02 	sts	0x02F8, r25
 612:	80 93 f7 02 	sts	0x02F7, r24
	enable_tx_interrupt();
 616:	0e 94 7f 05 	call	0xafe	; 0xafe <enable_tx_interrupt>
 61a:	2f ef       	ldi	r18, 0xFF	; 255
 61c:	80 e7       	ldi	r24, 0x70	; 112
 61e:	92 e0       	ldi	r25, 0x02	; 2
 620:	21 50       	subi	r18, 0x01	; 1
 622:	80 40       	sbci	r24, 0x00	; 0
 624:	90 40       	sbci	r25, 0x00	; 0
 626:	e1 f7       	brne	.-8      	; 0x620 <shell_print_with_new_line+0x12>
 628:	00 c0       	rjmp	.+0      	; 0x62a <shell_print_with_new_line+0x1c>
 62a:	00 00       	nop
	_delay_ms(100);
	new_line();
 62c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <new_line>
 630:	2f ef       	ldi	r18, 0xFF	; 255
 632:	80 e7       	ldi	r24, 0x70	; 112
 634:	92 e0       	ldi	r25, 0x02	; 2
 636:	21 50       	subi	r18, 0x01	; 1
 638:	80 40       	sbci	r24, 0x00	; 0
 63a:	90 40       	sbci	r25, 0x00	; 0
 63c:	e1 f7       	brne	.-8      	; 0x636 <shell_print_with_new_line+0x28>
 63e:	00 c0       	rjmp	.+0      	; 0x640 <shell_print_with_new_line+0x32>
 640:	00 00       	nop
	_delay_ms(100);
	new_line();
 642:	0e 94 fe 02 	call	0x5fc	; 0x5fc <new_line>
 646:	2f ef       	ldi	r18, 0xFF	; 255
 648:	80 e7       	ldi	r24, 0x70	; 112
 64a:	92 e0       	ldi	r25, 0x02	; 2
 64c:	21 50       	subi	r18, 0x01	; 1
 64e:	80 40       	sbci	r24, 0x00	; 0
 650:	90 40       	sbci	r25, 0x00	; 0
 652:	e1 f7       	brne	.-8      	; 0x64c <shell_print_with_new_line+0x3e>
 654:	00 c0       	rjmp	.+0      	; 0x656 <shell_print_with_new_line+0x48>
 656:	00 00       	nop
 658:	08 95       	ret

0000065a <menu_func_5>:
	}	
}
//----------------------------------------------------------
static void menu_func_5()  // exit menu
{
	shell_print_with_new_line(&log_out_data);
 65a:	85 e8       	ldi	r24, 0x85	; 133
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	0e 94 07 03 	call	0x60e	; 0x60e <shell_print_with_new_line>
 662:	08 95       	ret

00000664 <menu_func_2>:
	set_user_password();
}
//-----------------------------------------------------------
static void menu_func_2()  //open garage 
{
	if(e_garage_state==GARAGE_IS_CLOSED)
 664:	80 91 60 00 	lds	r24, 0x0060
 668:	81 30       	cpi	r24, 0x01	; 1
 66a:	39 f4       	brne	.+14     	; 0x67a <menu_func_2+0x16>
	{
		shell_print_with_new_line(&open_garage_string);
 66c:	8d e8       	ldi	r24, 0x8D	; 141
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	0e 94 07 03 	call	0x60e	; 0x60e <shell_print_with_new_line>
		open_garage();
 674:	0e 94 78 00 	call	0xf0	; 0xf0 <open_garage>
 678:	08 95       	ret
	}
	else
	{
		shell_print_with_new_line(&open_garage_error);
 67a:	89 e7       	ldi	r24, 0x79	; 121
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 07 03 	call	0x60e	; 0x60e <shell_print_with_new_line>
 682:	08 95       	ret

00000684 <menu_func_4>:
	
}
//--------------------------------------------------------
static void menu_func_4()  // unlock garage 
{	
	if(spi_master_state ==LOCK_SLAVE_STATE)
 684:	80 91 cd 02 	lds	r24, 0x02CD
 688:	84 30       	cpi	r24, 0x04	; 4
 68a:	11 f5       	brne	.+68     	; 0x6d0 <menu_func_4+0x4c>
	{
		spi_unlock_flag=1;
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	80 93 cc 02 	sts	0x02CC, r24
		spi_send_recieve(SLAVE_UNLOCK);
 692:	87 e0       	ldi	r24, 0x07	; 7
 694:	0e 94 a1 04 	call	0x942	; 0x942 <spi_send_recieve>
 698:	2f ef       	ldi	r18, 0xFF	; 255
 69a:	84 e3       	ldi	r24, 0x34	; 52
 69c:	9c e0       	ldi	r25, 0x0C	; 12
 69e:	21 50       	subi	r18, 0x01	; 1
 6a0:	80 40       	sbci	r24, 0x00	; 0
 6a2:	90 40       	sbci	r25, 0x00	; 0
 6a4:	e1 f7       	brne	.-8      	; 0x69e <menu_func_4+0x1a>
 6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <menu_func_4+0x24>
 6a8:	00 00       	nop
		_delay_ms(500);
		spi_send_recieve(OPEN_GARAGE_DATA);
 6aa:	89 e0       	ldi	r24, 0x09	; 9
 6ac:	0e 94 a1 04 	call	0x942	; 0x942 <spi_send_recieve>
	shell_print_with_new_line(&log_out_data);
}
//------------------------------------------------------------
void opening_garage_from_shell()
{
	shell_print_with_new_line(&unlock_data);
 6b0:	81 e8       	ldi	r24, 0x81	; 129
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	0e 94 07 03 	call	0x60e	; 0x60e <shell_print_with_new_line>
	open_garage();
 6b8:	0e 94 78 00 	call	0xf0	; 0xf0 <open_garage>
		spi_unlock_flag=1;
		spi_send_recieve(SLAVE_UNLOCK);
		_delay_ms(500);
		spi_send_recieve(OPEN_GARAGE_DATA);
		opening_garage_from_shell();
		spi_send_recieve(CLOSE_GARAGE_DATA);
 6bc:	8a e0       	ldi	r24, 0x0A	; 10
 6be:	0e 94 a1 04 	call	0x942	; 0x942 <spi_send_recieve>
	open_garage();
}
//------------------------------------------------------------
void closing_garage_from_shell()
{
	shell_print_with_new_line(&close_garage_string);
 6c2:	89 e8       	ldi	r24, 0x89	; 137
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0e 94 07 03 	call	0x60e	; 0x60e <shell_print_with_new_line>
	close_garage();
 6ca:	0e 94 80 00 	call	0x100	; 0x100 <close_garage>
 6ce:	08 95       	ret
		spi_send_recieve(CLOSE_GARAGE_DATA);
		closing_garage_from_shell();
	}
	else
	{
		shell_print_with_new_line(&unlock_data_error);
 6d0:	8d e7       	ldi	r24, 0x7D	; 125
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	0e 94 07 03 	call	0x60e	; 0x60e <shell_print_with_new_line>
 6d8:	08 95       	ret

000006da <menu_func_3>:
	
}
//---------------------------------------------------------
static void menu_func_3()  //close garage
{
	if(e_garage_state==GARAGE_IS_OPENED)
 6da:	80 91 60 00 	lds	r24, 0x0060
 6de:	81 11       	cpse	r24, r1
 6e0:	07 c0       	rjmp	.+14     	; 0x6f0 <menu_func_3+0x16>
	{
		shell_print_with_new_line(&close_garage_string);
 6e2:	89 e8       	ldi	r24, 0x89	; 137
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	0e 94 07 03 	call	0x60e	; 0x60e <shell_print_with_new_line>
		close_garage();
 6ea:	0e 94 80 00 	call	0x100	; 0x100 <close_garage>
 6ee:	08 95       	ret
	}
	else
	{
		shell_print_with_new_line(&close_garage_error);
 6f0:	85 e7       	ldi	r24, 0x75	; 117
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	0e 94 07 03 	call	0x60e	; 0x60e <shell_print_with_new_line>
 6f8:	08 95       	ret

000006fa <menu_func_1>:
}
//----------------------------------------------------
static void menu_func_1()  // reset user pass
{
	u8 index;
	data_to_send_address=&new_user_pass;
 6fa:	81 e9       	ldi	r24, 0x91	; 145
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	90 93 f8 02 	sts	0x02F8, r25
 702:	80 93 f7 02 	sts	0x02F7, r24
	enable_tx_interrupt();
 706:	0e 94 7f 05 	call	0xafe	; 0xafe <enable_tx_interrupt>
 70a:	2f ef       	ldi	r18, 0xFF	; 255
 70c:	80 e7       	ldi	r24, 0x70	; 112
 70e:	92 e0       	ldi	r25, 0x02	; 2
 710:	21 50       	subi	r18, 0x01	; 1
 712:	80 40       	sbci	r24, 0x00	; 0
 714:	90 40       	sbci	r25, 0x00	; 0
 716:	e1 f7       	brne	.-8      	; 0x710 <menu_func_1+0x16>
 718:	00 c0       	rjmp	.+0      	; 0x71a <menu_func_1+0x20>
 71a:	00 00       	nop
	_delay_ms(100);
	rx_interrupt_status=1;
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	80 93 cb 02 	sts	0x02CB, r24
	enable_rx_interrupt();
 722:	0e 94 7d 05 	call	0xafa	; 0xafa <enable_rx_interrupt>
	while(rx_interrupt_status==1);
 726:	80 91 cb 02 	lds	r24, 0x02CB
 72a:	81 30       	cpi	r24, 0x01	; 1
 72c:	e1 f3       	breq	.-8      	; 0x726 <menu_func_1+0x2c>
 72e:	a0 91 69 00 	lds	r26, 0x0069
 732:	b0 91 6a 00 	lds	r27, 0x006A
 736:	e1 e6       	ldi	r30, 0x61	; 97
 738:	f0 e0       	ldi	r31, 0x00	; 0
	}
	flush_buffer();
	set_admin_password();
}
//----------------------------------------------------
static void menu_func_1()  // reset user pass
 73a:	85 e6       	ldi	r24, 0x65	; 101
 73c:	90 e0       	ldi	r25, 0x00	; 0
	rx_interrupt_status=1;
	enable_rx_interrupt();
	while(rx_interrupt_status==1);
	for(index=0;index<MAX_PASSWORD_DIGIT;index++)
	{
		user_password[index]=rx_buffer.data.string[index];
 73e:	2d 91       	ld	r18, X+
 740:	21 93       	st	Z+, r18
	enable_tx_interrupt();
	_delay_ms(100);
	rx_interrupt_status=1;
	enable_rx_interrupt();
	while(rx_interrupt_status==1);
	for(index=0;index<MAX_PASSWORD_DIGIT;index++)
 742:	e8 17       	cp	r30, r24
 744:	f9 07       	cpc	r31, r25
 746:	d9 f7       	brne	.-10     	; 0x73e <menu_func_1+0x44>
	{
		user_password[index]=rx_buffer.data.string[index];
	}
	flush_buffer();
 748:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <flush_buffer>
	set_user_password();
 74c:	0e 94 a4 00 	call	0x148	; 0x148 <set_user_password>
 750:	08 95       	ret

00000752 <menu_func_0>:
}
//---------------------------------------------------------
static void menu_func_0()  //reset admin pass
{
	u8 index;
	data_to_send_address=&new_admin_pass;
 752:	85 e9       	ldi	r24, 0x95	; 149
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	90 93 f8 02 	sts	0x02F8, r25
 75a:	80 93 f7 02 	sts	0x02F7, r24
	enable_tx_interrupt();
 75e:	0e 94 7f 05 	call	0xafe	; 0xafe <enable_tx_interrupt>
 762:	2f ef       	ldi	r18, 0xFF	; 255
 764:	80 e7       	ldi	r24, 0x70	; 112
 766:	92 e0       	ldi	r25, 0x02	; 2
 768:	21 50       	subi	r18, 0x01	; 1
 76a:	80 40       	sbci	r24, 0x00	; 0
 76c:	90 40       	sbci	r25, 0x00	; 0
 76e:	e1 f7       	brne	.-8      	; 0x768 <menu_func_0+0x16>
 770:	00 c0       	rjmp	.+0      	; 0x772 <menu_func_0+0x20>
 772:	00 00       	nop
	_delay_ms(100);
	rx_interrupt_status=1;
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	80 93 cb 02 	sts	0x02CB, r24
	enable_rx_interrupt();
 77a:	0e 94 7d 05 	call	0xafa	; 0xafa <enable_rx_interrupt>
	while(rx_interrupt_status==1);
 77e:	80 91 cb 02 	lds	r24, 0x02CB
 782:	81 30       	cpi	r24, 0x01	; 1
 784:	e1 f3       	breq	.-8      	; 0x77e <menu_func_0+0x2c>
 786:	a0 91 69 00 	lds	r26, 0x0069
 78a:	b0 91 6a 00 	lds	r27, 0x006A
 78e:	e5 e6       	ldi	r30, 0x65	; 101
 790:	f0 e0       	ldi	r31, 0x00	; 0
	{
		return 255;  //not in range 
	}
}
//---------------------------------------------------------
static void menu_func_0()  //reset admin pass
 792:	89 e6       	ldi	r24, 0x69	; 105
 794:	90 e0       	ldi	r25, 0x00	; 0
	rx_interrupt_status=1;
	enable_rx_interrupt();
	while(rx_interrupt_status==1);
	for(index=0;index<MAX_PASSWORD_DIGIT;index++)
	{
		admin_password[index]=rx_buffer.data.string[index];
 796:	2d 91       	ld	r18, X+
 798:	21 93       	st	Z+, r18
	enable_tx_interrupt();
	_delay_ms(100);
	rx_interrupt_status=1;
	enable_rx_interrupt();
	while(rx_interrupt_status==1);
	for(index=0;index<MAX_PASSWORD_DIGIT;index++)
 79a:	e8 17       	cp	r30, r24
 79c:	f9 07       	cpc	r31, r25
 79e:	d9 f7       	brne	.-10     	; 0x796 <menu_func_0+0x44>
	{
		admin_password[index]=rx_buffer.data.string[index];
	}
	flush_buffer();
 7a0:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <flush_buffer>
	set_admin_password();
 7a4:	0e 94 89 00 	call	0x112	; 0x112 <set_admin_password>
 7a8:	08 95       	ret

000007aa <shell_init>:
//-------------------------------------------			
volatile u8 spi_unlock_flag=0;
//--------------------------------------------------------------				
void shell_init()
{
	data_to_send_address=&init_data;
 7aa:	8d eb       	ldi	r24, 0xBD	; 189
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	90 93 f8 02 	sts	0x02F8, r25
 7b2:	80 93 f7 02 	sts	0x02F7, r24
	enable_tx_interrupt();
 7b6:	0e 94 7f 05 	call	0xafe	; 0xafe <enable_tx_interrupt>
 7ba:	08 95       	ret

000007bc <admin_shell_password_enter>:
}
//-------------------------------------------------------------
void admin_shell_password_enter()
{
	enable_rx_interrupt();
 7bc:	0e 94 7d 05 	call	0xafa	; 0xafa <enable_rx_interrupt>
	rx_interrupt_status=1;
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	80 93 cb 02 	sts	0x02CB, r24
 7c6:	08 95       	ret

000007c8 <admin_shell_password_check>:
}
//----------------------------------------------------------
u8 admin_shell_password_check()
{
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
 7cc:	00 d0       	rcall	.+0      	; 0x7ce <admin_shell_password_check+0x6>
 7ce:	cd b7       	in	r28, 0x3d	; 61
 7d0:	de b7       	in	r29, 0x3e	; 62
	volatile u8 index,error=0;
 7d2:	1a 82       	std	Y+2, r1	; 0x02
	if(rx_buffer.length !=4)
 7d4:	80 91 6b 00 	lds	r24, 0x006B
 7d8:	84 30       	cpi	r24, 0x04	; 4
 7da:	51 f0       	breq	.+20     	; 0x7f0 <admin_shell_password_check+0x28>
	{ 
		data_to_send_address=&unsuccess_data;
 7dc:	85 eb       	ldi	r24, 0xB5	; 181
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	90 93 f8 02 	sts	0x02F8, r25
 7e4:	80 93 f7 02 	sts	0x02F7, r24
		enable_tx_interrupt();
 7e8:	0e 94 7f 05 	call	0xafe	; 0xafe <enable_tx_interrupt>
		return 1; //error 
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	30 c0       	rjmp	.+96     	; 0x850 <admin_shell_password_check+0x88>
	}	
	for(index=0;index<MAX_PASSWORD_DIGIT;index++)
 7f0:	19 82       	std	Y+1, r1	; 0x01
 7f2:	89 81       	ldd	r24, Y+1	; 0x01
 7f4:	84 30       	cpi	r24, 0x04	; 4
 7f6:	b8 f4       	brcc	.+46     	; 0x826 <admin_shell_password_check+0x5e>
	{
		if(rx_buffer.data.string[index]!=admin_password[index])
 7f8:	80 91 69 00 	lds	r24, 0x0069
 7fc:	90 91 6a 00 	lds	r25, 0x006A
		{
			error=1;
 800:	41 e0       	ldi	r20, 0x01	; 1
		enable_tx_interrupt();
		return 1; //error 
	}	
	for(index=0;index<MAX_PASSWORD_DIGIT;index++)
	{
		if(rx_buffer.data.string[index]!=admin_password[index])
 802:	29 81       	ldd	r18, Y+1	; 0x01
 804:	e9 81       	ldd	r30, Y+1	; 0x01
 806:	dc 01       	movw	r26, r24
 808:	a2 0f       	add	r26, r18
 80a:	b1 1d       	adc	r27, r1
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	eb 59       	subi	r30, 0x9B	; 155
 810:	ff 4f       	sbci	r31, 0xFF	; 255
 812:	3c 91       	ld	r19, X
 814:	20 81       	ld	r18, Z
 816:	32 13       	cpse	r19, r18
		{
			error=1;
 818:	4a 83       	std	Y+2, r20	; 0x02
	{ 
		data_to_send_address=&unsuccess_data;
		enable_tx_interrupt();
		return 1; //error 
	}	
	for(index=0;index<MAX_PASSWORD_DIGIT;index++)
 81a:	29 81       	ldd	r18, Y+1	; 0x01
 81c:	2f 5f       	subi	r18, 0xFF	; 255
 81e:	29 83       	std	Y+1, r18	; 0x01
 820:	29 81       	ldd	r18, Y+1	; 0x01
 822:	24 30       	cpi	r18, 0x04	; 4
 824:	70 f3       	brcs	.-36     	; 0x802 <admin_shell_password_check+0x3a>
		if(rx_buffer.data.string[index]!=admin_password[index])
		{
			error=1;
		}
	}
	if(error==1)
 826:	8a 81       	ldd	r24, Y+2	; 0x02
 828:	81 30       	cpi	r24, 0x01	; 1
 82a:	49 f4       	brne	.+18     	; 0x83e <admin_shell_password_check+0x76>
	{
		
		data_to_send_address=&unsuccess_data;
 82c:	85 eb       	ldi	r24, 0xB5	; 181
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	90 93 f8 02 	sts	0x02F8, r25
 834:	80 93 f7 02 	sts	0x02F7, r24
		enable_tx_interrupt();
 838:	0e 94 7f 05 	call	0xafe	; 0xafe <enable_tx_interrupt>
 83c:	08 c0       	rjmp	.+16     	; 0x84e <admin_shell_password_check+0x86>
		
	}
	else
	{
			data_to_send_address=&success_data;
 83e:	89 eb       	ldi	r24, 0xB9	; 185
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	90 93 f8 02 	sts	0x02F8, r25
 846:	80 93 f7 02 	sts	0x02F7, r24
			enable_tx_interrupt();
 84a:	0e 94 7f 05 	call	0xafe	; 0xafe <enable_tx_interrupt>
	}
	return error;
 84e:	8a 81       	ldd	r24, Y+2	; 0x02
}
 850:	0f 90       	pop	r0
 852:	0f 90       	pop	r0
 854:	df 91       	pop	r29
 856:	cf 91       	pop	r28
 858:	08 95       	ret

0000085a <menu>:
//------------------------------------------------------
void menu()
{
 85a:	cf 93       	push	r28
 85c:	df 93       	push	r29
 85e:	c0 e0       	ldi	r28, 0x00	; 0
 860:	d0 e0       	ldi	r29, 0x00	; 0
	u8 index;
	for(index=0;index<MENU_OPTIONS;index++)
	{
		data_to_send_address=&(menu_data[index]);
 862:	ce 01       	movw	r24, r28
 864:	88 0f       	add	r24, r24
 866:	99 1f       	adc	r25, r25
 868:	88 0f       	add	r24, r24
 86a:	99 1f       	adc	r25, r25
 86c:	83 56       	subi	r24, 0x63	; 99
 86e:	9f 4f       	sbci	r25, 0xFF	; 255
 870:	90 93 f8 02 	sts	0x02F8, r25
 874:	80 93 f7 02 	sts	0x02F7, r24
		enable_tx_interrupt();
 878:	0e 94 7f 05 	call	0xafe	; 0xafe <enable_tx_interrupt>
 87c:	2f ef       	ldi	r18, 0xFF	; 255
 87e:	80 e7       	ldi	r24, 0x70	; 112
 880:	92 e0       	ldi	r25, 0x02	; 2
 882:	21 50       	subi	r18, 0x01	; 1
 884:	80 40       	sbci	r24, 0x00	; 0
 886:	90 40       	sbci	r25, 0x00	; 0
 888:	e1 f7       	brne	.-8      	; 0x882 <__stack+0x23>
 88a:	00 c0       	rjmp	.+0      	; 0x88c <__stack+0x2d>
 88c:	00 00       	nop
		_delay_ms(100);	
		new_line();
 88e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <new_line>
 892:	21 96       	adiw	r28, 0x01	; 1
}
//------------------------------------------------------
void menu()
{
	u8 index;
	for(index=0;index<MENU_OPTIONS;index++)
 894:	c6 30       	cpi	r28, 0x06	; 6
 896:	d1 05       	cpc	r29, r1
 898:	21 f7       	brne	.-56     	; 0x862 <__stack+0x3>
		data_to_send_address=&(menu_data[index]);
		enable_tx_interrupt();
		_delay_ms(100);	
		new_line();
	}
	data_to_send_address=&prompt_data;
 89a:	89 e9       	ldi	r24, 0x99	; 153
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	90 93 f8 02 	sts	0x02F8, r25
 8a2:	80 93 f7 02 	sts	0x02F7, r24
	enable_tx_interrupt();
 8a6:	0e 94 7f 05 	call	0xafe	; 0xafe <enable_tx_interrupt>
}
 8aa:	df 91       	pop	r29
 8ac:	cf 91       	pop	r28
 8ae:	08 95       	ret

000008b0 <menu_selected_check>:
//-------------------------------------------------------
u8 menu_selected_check()
{
 8b0:	cf 93       	push	r28
 8b2:	df 93       	push	r29
 8b4:	1f 92       	push	r1
 8b6:	cd b7       	in	r28, 0x3d	; 61
 8b8:	de b7       	in	r29, 0x3e	; 62
	u8 volatile index;
	
	index=rx_buffer.data.string[0];
 8ba:	e0 91 69 00 	lds	r30, 0x0069
 8be:	f0 91 6a 00 	lds	r31, 0x006A
 8c2:	80 81       	ld	r24, Z
 8c4:	89 83       	std	Y+1, r24	; 0x01
	if(rx_buffer.length !=1) return 255; // many input
 8c6:	80 91 6b 00 	lds	r24, 0x006B
 8ca:	81 30       	cpi	r24, 0x01	; 1
 8cc:	b9 f4       	brne	.+46     	; 0x8fc <menu_selected_check+0x4c>
	flush_buffer();
 8ce:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <flush_buffer>
	if(index >='0' && index<='5')
 8d2:	89 81       	ldd	r24, Y+1	; 0x01
 8d4:	80 33       	cpi	r24, 0x30	; 48
 8d6:	a0 f0       	brcs	.+40     	; 0x900 <menu_selected_check+0x50>
 8d8:	89 81       	ldd	r24, Y+1	; 0x01
 8da:	86 33       	cpi	r24, 0x36	; 54
 8dc:	98 f4       	brcc	.+38     	; 0x904 <menu_selected_check+0x54>
	{
		index=index-48;
 8de:	89 81       	ldd	r24, Y+1	; 0x01
 8e0:	80 53       	subi	r24, 0x30	; 48
 8e2:	89 83       	std	Y+1, r24	; 0x01
		ptrfunc[index]();
 8e4:	e9 81       	ldd	r30, Y+1	; 0x01
 8e6:	f0 e0       	ldi	r31, 0x00	; 0
 8e8:	ee 0f       	add	r30, r30
 8ea:	ff 1f       	adc	r31, r31
 8ec:	ef 53       	subi	r30, 0x3F	; 63
 8ee:	ff 4f       	sbci	r31, 0xFF	; 255
 8f0:	01 90       	ld	r0, Z+
 8f2:	f0 81       	ld	r31, Z
 8f4:	e0 2d       	mov	r30, r0
 8f6:	09 95       	icall
		return index;
 8f8:	89 81       	ldd	r24, Y+1	; 0x01
 8fa:	05 c0       	rjmp	.+10     	; 0x906 <menu_selected_check+0x56>
u8 menu_selected_check()
{
	u8 volatile index;
	
	index=rx_buffer.data.string[0];
	if(rx_buffer.length !=1) return 255; // many input
 8fc:	8f ef       	ldi	r24, 0xFF	; 255
 8fe:	03 c0       	rjmp	.+6      	; 0x906 <menu_selected_check+0x56>
		ptrfunc[index]();
		return index;
	}
	else
	{
		return 255;  //not in range 
 900:	8f ef       	ldi	r24, 0xFF	; 255
 902:	01 c0       	rjmp	.+2      	; 0x906 <menu_selected_check+0x56>
 904:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
 906:	0f 90       	pop	r0
 908:	df 91       	pop	r29
 90a:	cf 91       	pop	r28
 90c:	08 95       	ret

0000090e <spi_master_init>:
	
	#if SPI_INTERRUPT_ENABLE == 1
		set_bit(SPCR,SPIE);
	#endif
	
	set_bit(SPCR,SPE); //enable spi
 90e:	6e 9a       	sbi	0x0d, 6	; 13
	
	//data order config
	#if SPI_DATA_ORDER == MSB
	clear_bit(SPCR,DORD);
 910:	6d 98       	cbi	0x0d, 5	; 13
	set_bit(SPCR,DORD);
	#endif
	
	
	 
	clear_bit(SPCR,CPOL);   //low as idle
 912:	6b 98       	cbi	0x0d, 3	; 13
	 
	clear_bit(SPCR,CPHA);   //sample at leading edge  (rising) mode 0
 914:	6a 98       	cbi	0x0d, 2	; 13
	
	set_bit(SPCR,SPR0);
 916:	68 9a       	sbi	0x0d, 0	; 13
	set_bit(SPCR,SPR1);  //freq = fclk/128
 918:	69 9a       	sbi	0x0d, 1	; 13
	clear_bit(SPSR,SPI2X);
 91a:	70 98       	cbi	0x0e, 0	; 14
	set_bit(SPCR,MSTR);  //as master 
 91c:	6c 9a       	sbi	0x0d, 4	; 13
	set_bit(SPI_DDR,SPI_MOSI);
 91e:	bd 9a       	sbi	0x17, 5	; 23
	set_bit(SPI_DDR,SPI_SCK);
 920:	bf 9a       	sbi	0x17, 7	; 23
	set_bit(SPI_DDR,SPI_SS);
 922:	bc 9a       	sbi	0x17, 4	; 23
	clear_bit(SPI_DDR,SPI_MISO);
 924:	be 98       	cbi	0x17, 6	; 23
	set_bit(SPI_PORT,SPI_SS);
 926:	c4 9a       	sbi	0x18, 4	; 24
 928:	08 95       	ret

0000092a <spi_send>:
}


void spi_send(u8 data)
{
	SPDR=data;
 92a:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 92c:	77 9b       	sbis	0x0e, 7	; 14
 92e:	fe cf       	rjmp	.-4      	; 0x92c <spi_send+0x2>
}
 930:	08 95       	ret

00000932 <spi_read>:

u8 spi_read(void)
{
	while(!(SPSR & (1<<SPIF)));
 932:	77 9b       	sbis	0x0e, 7	; 14
 934:	fe cf       	rjmp	.-4      	; 0x932 <spi_read>
	return SPDR;
 936:	8f b1       	in	r24, 0x0f	; 15
}
 938:	08 95       	ret

0000093a <spi_start>:


void spi_start(void)
{
	clear_bit(SPI_PORT,SPI_SS);
 93a:	c4 98       	cbi	0x18, 4	; 24
 93c:	08 95       	ret

0000093e <spi_end>:
}
void spi_end(void)
{
	set_bit(SPI_PORT,SPI_SS);
 93e:	c4 9a       	sbi	0x18, 4	; 24
 940:	08 95       	ret

00000942 <spi_send_recieve>:
}

u8 spi_send_recieve(u8 data)
{
 942:	cf 93       	push	r28
 944:	c8 2f       	mov	r28, r24
	u8 temp;
	spi_start();
 946:	0e 94 9d 04 	call	0x93a	; 0x93a <spi_start>
	spi_send(data);
 94a:	8c 2f       	mov	r24, r28
 94c:	0e 94 95 04 	call	0x92a	; 0x92a <spi_send>
	temp=spi_read();
 950:	0e 94 99 04 	call	0x932	; 0x932 <spi_read>
 954:	c8 2f       	mov	r28, r24
	spi_end();
 956:	0e 94 9f 04 	call	0x93e	; 0x93e <spi_end>
	return temp;
}
 95a:	8c 2f       	mov	r24, r28
 95c:	cf 91       	pop	r28
 95e:	08 95       	ret

00000960 <master_spi_state>:
u8 temp_password_string[4];   //temp array to store recived password from slave
u8 temp_password_index=0;      //
volatile SPI_MASTER_STATE spi_master_state=SPI_IDLE_STATE;
//--------------------------------------------------
void master_spi_state()
{
 960:	cf 93       	push	r28
	u8 error=0,index=0,spi_slave_data;
	switch(spi_master_state)
 962:	80 91 cd 02 	lds	r24, 0x02CD
 966:	82 30       	cpi	r24, 0x02	; 2
 968:	09 f4       	brne	.+2      	; 0x96c <master_spi_state+0xc>
 96a:	8c c0       	rjmp	.+280    	; 0xa84 <master_spi_state+0x124>
 96c:	30 f4       	brcc	.+12     	; 0x97a <master_spi_state+0x1a>
 96e:	88 23       	and	r24, r24
 970:	59 f0       	breq	.+22     	; 0x988 <master_spi_state+0x28>
 972:	81 30       	cpi	r24, 0x01	; 1
 974:	09 f0       	breq	.+2      	; 0x978 <master_spi_state+0x18>
 976:	b0 c0       	rjmp	.+352    	; 0xad8 <master_spi_state+0x178>
 978:	2f c0       	rjmp	.+94     	; 0x9d8 <master_spi_state+0x78>
 97a:	83 30       	cpi	r24, 0x03	; 3
 97c:	09 f4       	brne	.+2      	; 0x980 <master_spi_state+0x20>
 97e:	98 c0       	rjmp	.+304    	; 0xab0 <master_spi_state+0x150>
 980:	84 30       	cpi	r24, 0x04	; 4
 982:	09 f0       	breq	.+2      	; 0x986 <master_spi_state+0x26>
 984:	a9 c0       	rjmp	.+338    	; 0xad8 <master_spi_state+0x178>
 986:	a0 c0       	rjmp	.+320    	; 0xac8 <master_spi_state+0x168>
	{
		case SPI_IDLE_STATE :
		{
				spi_slave_data=spi_send_recieve(REQUEST_SLAVE);
 988:	81 e0       	ldi	r24, 0x01	; 1
 98a:	0e 94 a1 04 	call	0x942	; 0x942 <spi_send_recieve>
				if(spi_slave_data==PASSWORD_CHECK_REQUEST)
 98e:	82 30       	cpi	r24, 0x02	; 2
 990:	c9 f4       	brne	.+50     	; 0x9c4 <master_spi_state+0x64>
 992:	2f e7       	ldi	r18, 0x7F	; 127
 994:	88 e3       	ldi	r24, 0x38	; 56
 996:	91 e0       	ldi	r25, 0x01	; 1
 998:	21 50       	subi	r18, 0x01	; 1
 99a:	80 40       	sbci	r24, 0x00	; 0
 99c:	90 40       	sbci	r25, 0x00	; 0
 99e:	e1 f7       	brne	.-8      	; 0x998 <master_spi_state+0x38>
 9a0:	00 c0       	rjmp	.+0      	; 0x9a2 <master_spi_state+0x42>
 9a2:	00 00       	nop
				{
					_delay_ms(50);
					spi_master_state=PASSWORD_RESPOND_STATE;
 9a4:	81 e0       	ldi	r24, 0x01	; 1
 9a6:	80 93 cd 02 	sts	0x02CD, r24
					spi_slave_data=spi_send_recieve(PASSWORD_CHECK_RESPOND);//ack
 9aa:	83 e0       	ldi	r24, 0x03	; 3
 9ac:	0e 94 a1 04 	call	0x942	; 0x942 <spi_send_recieve>
 9b0:	2f e7       	ldi	r18, 0x7F	; 127
 9b2:	88 e3       	ldi	r24, 0x38	; 56
 9b4:	91 e0       	ldi	r25, 0x01	; 1
 9b6:	21 50       	subi	r18, 0x01	; 1
 9b8:	80 40       	sbci	r24, 0x00	; 0
 9ba:	90 40       	sbci	r25, 0x00	; 0
 9bc:	e1 f7       	brne	.-8      	; 0x9b6 <master_spi_state+0x56>
 9be:	00 c0       	rjmp	.+0      	; 0x9c0 <master_spi_state+0x60>
 9c0:	00 00       	nop
 9c2:	8a c0       	rjmp	.+276    	; 0xad8 <master_spi_state+0x178>
 9c4:	2f ef       	ldi	r18, 0xFF	; 255
 9c6:	82 e5       	ldi	r24, 0x52	; 82
 9c8:	97 e0       	ldi	r25, 0x07	; 7
 9ca:	21 50       	subi	r18, 0x01	; 1
 9cc:	80 40       	sbci	r24, 0x00	; 0
 9ce:	90 40       	sbci	r25, 0x00	; 0
 9d0:	e1 f7       	brne	.-8      	; 0x9ca <master_spi_state+0x6a>
 9d2:	00 c0       	rjmp	.+0      	; 0x9d4 <master_spi_state+0x74>
 9d4:	00 00       	nop
 9d6:	80 c0       	rjmp	.+256    	; 0xad8 <master_spi_state+0x178>
				}
				break;
		}		
		case PASSWORD_RESPOND_STATE ://send 3 respond and one done spi
		{
				for(temp_password_index=0;temp_password_index<3;temp_password_index++)
 9d8:	10 92 ce 02 	sts	0x02CE, r1
 9dc:	c0 e0       	ldi	r28, 0x00	; 0
				{
					temp_password_string[temp_password_index]=spi_send_recieve(PASSWORD_CHECK_RESPOND); //first
 9de:	83 e0       	ldi	r24, 0x03	; 3
 9e0:	0e 94 a1 04 	call	0x942	; 0x942 <spi_send_recieve>
 9e4:	ec 2f       	mov	r30, r28
 9e6:	f0 e0       	ldi	r31, 0x00	; 0
 9e8:	e7 50       	subi	r30, 0x07	; 7
 9ea:	fd 4f       	sbci	r31, 0xFD	; 253
 9ec:	80 83       	st	Z, r24
 9ee:	2f e7       	ldi	r18, 0x7F	; 127
 9f0:	88 e3       	ldi	r24, 0x38	; 56
 9f2:	91 e0       	ldi	r25, 0x01	; 1
 9f4:	21 50       	subi	r18, 0x01	; 1
 9f6:	80 40       	sbci	r24, 0x00	; 0
 9f8:	90 40       	sbci	r25, 0x00	; 0
 9fa:	e1 f7       	brne	.-8      	; 0x9f4 <master_spi_state+0x94>
 9fc:	00 c0       	rjmp	.+0      	; 0x9fe <master_spi_state+0x9e>
 9fe:	00 00       	nop
				}
				break;
		}		
		case PASSWORD_RESPOND_STATE ://send 3 respond and one done spi
		{
				for(temp_password_index=0;temp_password_index<3;temp_password_index++)
 a00:	c0 91 ce 02 	lds	r28, 0x02CE
 a04:	cf 5f       	subi	r28, 0xFF	; 255
 a06:	c0 93 ce 02 	sts	0x02CE, r28
 a0a:	c3 30       	cpi	r28, 0x03	; 3
 a0c:	40 f3       	brcs	.-48     	; 0x9de <master_spi_state+0x7e>
				{
					temp_password_string[temp_password_index]=spi_send_recieve(PASSWORD_CHECK_RESPOND); //first
					_delay_ms(50);
				}
				temp_password_string[temp_password_index]=spi_send_recieve(DONE_SPI); //last
 a0e:	88 e0       	ldi	r24, 0x08	; 8
 a10:	0e 94 a1 04 	call	0x942	; 0x942 <spi_send_recieve>
 a14:	ec 2f       	mov	r30, r28
 a16:	f0 e0       	ldi	r31, 0x00	; 0
 a18:	e7 50       	subi	r30, 0x07	; 7
 a1a:	fd 4f       	sbci	r31, 0xFD	; 253
 a1c:	80 83       	st	Z, r24
 a1e:	2f ef       	ldi	r18, 0xFF	; 255
 a20:	81 ee       	ldi	r24, 0xE1	; 225
 a22:	94 e0       	ldi	r25, 0x04	; 4
 a24:	21 50       	subi	r18, 0x01	; 1
 a26:	80 40       	sbci	r24, 0x00	; 0
 a28:	90 40       	sbci	r25, 0x00	; 0
 a2a:	e1 f7       	brne	.-8      	; 0xa24 <master_spi_state+0xc4>
 a2c:	00 c0       	rjmp	.+0      	; 0xa2e <master_spi_state+0xce>
 a2e:	00 00       	nop
				_delay_ms(200);
				temp_password_index=0;
 a30:	10 92 ce 02 	sts	0x02CE, r1
 a34:	e9 ef       	ldi	r30, 0xF9	; 249
 a36:	f2 e0       	ldi	r31, 0x02	; 2
 a38:	a1 e6       	ldi	r26, 0x61	; 97
 a3a:	b0 e0       	ldi	r27, 0x00	; 0
//-----------------------------------------------------------
u8 temp_password_string[4];   //temp array to store recived password from slave
u8 temp_password_index=0;      //
volatile SPI_MASTER_STATE spi_master_state=SPI_IDLE_STATE;
//--------------------------------------------------
void master_spi_state()
 a3c:	8d ef       	ldi	r24, 0xFD	; 253
 a3e:	92 e0       	ldi	r25, 0x02	; 2
{
	u8 error=0,index=0,spi_slave_data;
 a40:	40 e0       	ldi	r20, 0x00	; 0
				temp_password_index=0;
				for(index=0;index<4;index++)
				{
					if(temp_password_string[index] != user_password[index])
					{
						error=1;
 a42:	51 e0       	ldi	r21, 0x01	; 1
				temp_password_string[temp_password_index]=spi_send_recieve(DONE_SPI); //last
				_delay_ms(200);
				temp_password_index=0;
				for(index=0;index<4;index++)
				{
					if(temp_password_string[index] != user_password[index])
 a44:	31 91       	ld	r19, Z+
 a46:	2d 91       	ld	r18, X+
 a48:	32 13       	cpse	r19, r18
					{
						error=1;
 a4a:	45 2f       	mov	r20, r21
					_delay_ms(50);
				}
				temp_password_string[temp_password_index]=spi_send_recieve(DONE_SPI); //last
				_delay_ms(200);
				temp_password_index=0;
				for(index=0;index<4;index++)
 a4c:	e8 17       	cp	r30, r24
 a4e:	f9 07       	cpc	r31, r25
 a50:	c9 f7       	brne	.-14     	; 0xa44 <master_spi_state+0xe4>
					if(temp_password_string[index] != user_password[index])
					{
						error=1;
					}
				}
				if(error==0)
 a52:	41 11       	cpse	r20, r1
 a54:	07 c0       	rjmp	.+14     	; 0xa64 <master_spi_state+0x104>
				{
					spi_master_state=VALID_PASSWORD_STATE;
 a56:	82 e0       	ldi	r24, 0x02	; 2
 a58:	80 93 cd 02 	sts	0x02CD, r24
					spi_slave_data=spi_send_recieve(VALID_PASSWORD);//send
 a5c:	84 e0       	ldi	r24, 0x04	; 4
 a5e:	0e 94 a1 04 	call	0x942	; 0x942 <spi_send_recieve>
 a62:	06 c0       	rjmp	.+12     	; 0xa70 <master_spi_state+0x110>
				}
				else
				{
					spi_master_state=INVALID_PASSWORD_STATE;
 a64:	83 e0       	ldi	r24, 0x03	; 3
 a66:	80 93 cd 02 	sts	0x02CD, r24
					spi_slave_data=spi_send_recieve(INVALID_PASSWORD);//send
 a6a:	85 e0       	ldi	r24, 0x05	; 5
 a6c:	0e 94 a1 04 	call	0x942	; 0x942 <spi_send_recieve>
 a70:	2f e7       	ldi	r18, 0x7F	; 127
 a72:	88 e3       	ldi	r24, 0x38	; 56
 a74:	91 e0       	ldi	r25, 0x01	; 1
 a76:	21 50       	subi	r18, 0x01	; 1
 a78:	80 40       	sbci	r24, 0x00	; 0
 a7a:	90 40       	sbci	r25, 0x00	; 0
 a7c:	e1 f7       	brne	.-8      	; 0xa76 <master_spi_state+0x116>
 a7e:	00 c0       	rjmp	.+0      	; 0xa80 <master_spi_state+0x120>
 a80:	00 00       	nop
 a82:	2a c0       	rjmp	.+84     	; 0xad8 <master_spi_state+0x178>
 a84:	2f ef       	ldi	r18, 0xFF	; 255
 a86:	88 e0       	ldi	r24, 0x08	; 8
 a88:	9d e3       	ldi	r25, 0x3D	; 61
 a8a:	21 50       	subi	r18, 0x01	; 1
 a8c:	80 40       	sbci	r24, 0x00	; 0
 a8e:	90 40       	sbci	r25, 0x00	; 0
 a90:	e1 f7       	brne	.-8      	; 0xa8a <master_spi_state+0x12a>
 a92:	00 c0       	rjmp	.+0      	; 0xa94 <master_spi_state+0x134>
 a94:	00 00       	nop
				break;
		}		
		case VALID_PASSWORD_STATE :
		{
			_delay_ms(2500);   //time matching
			spi_slave_data=spi_send_recieve(OPEN_GARAGE_DATA);
 a96:	89 e0       	ldi	r24, 0x09	; 9
 a98:	0e 94 a1 04 	call	0x942	; 0x942 <spi_send_recieve>
			open_garage();
 a9c:	0e 94 78 00 	call	0xf0	; 0xf0 <open_garage>
			spi_slave_data=spi_send_recieve(CLOSE_GARAGE_DATA);
 aa0:	8a e0       	ldi	r24, 0x0A	; 10
 aa2:	0e 94 a1 04 	call	0x942	; 0x942 <spi_send_recieve>
			close_garage();
 aa6:	0e 94 80 00 	call	0x100	; 0x100 <close_garage>
			spi_master_state=SPI_IDLE_STATE;
 aaa:	10 92 cd 02 	sts	0x02CD, r1
		}		
		break;
 aae:	14 c0       	rjmp	.+40     	; 0xad8 <master_spi_state+0x178>
		case INVALID_PASSWORD_STATE :
		{
				spi_slave_data=spi_send_recieve(NO_SPI_DATA);//recive
 ab0:	80 e0       	ldi	r24, 0x00	; 0
 ab2:	0e 94 a1 04 	call	0x942	; 0x942 <spi_send_recieve>
				if(spi_slave_data==SLAVE_LOCKED)
 ab6:	86 30       	cpi	r24, 0x06	; 6
 ab8:	21 f4       	brne	.+8      	; 0xac2 <master_spi_state+0x162>
				{
					spi_master_state=LOCK_SLAVE_STATE;
 aba:	84 e0       	ldi	r24, 0x04	; 4
 abc:	80 93 cd 02 	sts	0x02CD, r24
 ac0:	0b c0       	rjmp	.+22     	; 0xad8 <master_spi_state+0x178>
				}
				else
				{
					spi_master_state=SPI_IDLE_STATE;
 ac2:	10 92 cd 02 	sts	0x02CD, r1
 ac6:	08 c0       	rjmp	.+16     	; 0xad8 <master_spi_state+0x178>
				}
				break;
		}		
		case LOCK_SLAVE_STATE :
		{
				if(spi_unlock_flag==1)
 ac8:	80 91 cc 02 	lds	r24, 0x02CC
 acc:	81 30       	cpi	r24, 0x01	; 1
 ace:	21 f4       	brne	.+8      	; 0xad8 <master_spi_state+0x178>
				{
					spi_unlock_flag=0;
 ad0:	10 92 cc 02 	sts	0x02CC, r1
					spi_master_state=SPI_IDLE_STATE;
 ad4:	10 92 cd 02 	sts	0x02CD, r1
				break;
		}		
		default:
		break;
	}
}
 ad8:	cf 91       	pop	r28
 ada:	08 95       	ret

00000adc <serial_init>:
 */ 
#include "usart.h"
//-----------------------------------------------------
void serial_init()
{
	clear_bit(UCSRA,U2X);
 adc:	59 98       	cbi	0x0b, 1	; 11
	clear_bit(UCSRA,MPCM);
 ade:	58 98       	cbi	0x0b, 0	; 11
	clear_bit(UCSRB,UCSZ2);
 ae0:	52 98       	cbi	0x0a, 2	; 10
	set_bit(UCSRB,TXEN);  //enable transmition
 ae2:	53 9a       	sbi	0x0a, 3	; 10
	set_bit(UCSRB,RXEN);  //enable reciver
 ae4:	54 9a       	sbi	0x0a, 4	; 10
	
	UCSRC = (1<<UCSZ0) | (1<<UCSZ1) | (1<<URSEL);  //8 data no parity 1 stop bit
 ae6:	86 e8       	ldi	r24, 0x86	; 134
 ae8:	80 bd       	out	0x20, r24	; 32
	UBRRL = BAUD_VALUE ;  //0x33
 aea:	83 e3       	ldi	r24, 0x33	; 51
 aec:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0;
 aee:	10 bc       	out	0x20, r1	; 32
 af0:	08 95       	ret

00000af2 <disable_rx_interrupt>:
}

#else
void disable_rx_interrupt()
{
	clear_bit(UCSRB,RXCIE);
 af2:	57 98       	cbi	0x0a, 7	; 10
 af4:	08 95       	ret

00000af6 <disable_tx_interrupt>:
}

void disable_tx_interrupt()
{
	clear_bit(UCSRB,UDRIE);
 af6:	55 98       	cbi	0x0a, 5	; 10
 af8:	08 95       	ret

00000afa <enable_rx_interrupt>:
}

void enable_rx_interrupt()
{
	set_bit(UCSRB,RXCIE);
 afa:	57 9a       	sbi	0x0a, 7	; 10
 afc:	08 95       	ret

00000afe <enable_tx_interrupt>:
}

void enable_tx_interrupt()
{
	set_bit(UCSRB,UDRIE);
 afe:	55 9a       	sbi	0x0a, 5	; 10
 b00:	08 95       	ret

00000b02 <__divmodhi4>:
 b02:	97 fb       	bst	r25, 7
 b04:	07 2e       	mov	r0, r23
 b06:	16 f4       	brtc	.+4      	; 0xb0c <__divmodhi4+0xa>
 b08:	00 94       	com	r0
 b0a:	07 d0       	rcall	.+14     	; 0xb1a <__divmodhi4_neg1>
 b0c:	77 fd       	sbrc	r23, 7
 b0e:	09 d0       	rcall	.+18     	; 0xb22 <__divmodhi4_neg2>
 b10:	0e 94 95 05 	call	0xb2a	; 0xb2a <__udivmodhi4>
 b14:	07 fc       	sbrc	r0, 7
 b16:	05 d0       	rcall	.+10     	; 0xb22 <__divmodhi4_neg2>
 b18:	3e f4       	brtc	.+14     	; 0xb28 <__divmodhi4_exit>

00000b1a <__divmodhi4_neg1>:
 b1a:	90 95       	com	r25
 b1c:	81 95       	neg	r24
 b1e:	9f 4f       	sbci	r25, 0xFF	; 255
 b20:	08 95       	ret

00000b22 <__divmodhi4_neg2>:
 b22:	70 95       	com	r23
 b24:	61 95       	neg	r22
 b26:	7f 4f       	sbci	r23, 0xFF	; 255

00000b28 <__divmodhi4_exit>:
 b28:	08 95       	ret

00000b2a <__udivmodhi4>:
 b2a:	aa 1b       	sub	r26, r26
 b2c:	bb 1b       	sub	r27, r27
 b2e:	51 e1       	ldi	r21, 0x11	; 17
 b30:	07 c0       	rjmp	.+14     	; 0xb40 <__udivmodhi4_ep>

00000b32 <__udivmodhi4_loop>:
 b32:	aa 1f       	adc	r26, r26
 b34:	bb 1f       	adc	r27, r27
 b36:	a6 17       	cp	r26, r22
 b38:	b7 07       	cpc	r27, r23
 b3a:	10 f0       	brcs	.+4      	; 0xb40 <__udivmodhi4_ep>
 b3c:	a6 1b       	sub	r26, r22
 b3e:	b7 0b       	sbc	r27, r23

00000b40 <__udivmodhi4_ep>:
 b40:	88 1f       	adc	r24, r24
 b42:	99 1f       	adc	r25, r25
 b44:	5a 95       	dec	r21
 b46:	a9 f7       	brne	.-22     	; 0xb32 <__udivmodhi4_loop>
 b48:	80 95       	com	r24
 b4a:	90 95       	com	r25
 b4c:	bc 01       	movw	r22, r24
 b4e:	cd 01       	movw	r24, r26
 b50:	08 95       	ret

00000b52 <_exit>:
 b52:	f8 94       	cli

00000b54 <__stop_program>:
 b54:	ff cf       	rjmp	.-2      	; 0xb54 <__stop_program>
